syntax = "proto3";

package primarybackup;

service PrimaryBackup {
    rpc Ping(HeartBeat) returns (HeartBeat) {}
    rpc Write(WriteRequest) returns (WriteResponse) {}
    
    // when the backup comes up, it initiates a sync 
    // operation and gets it state up to date. 
    rpc Sync(SyncReq) returns (stream WriteRequest) {}

    // return heartbeat with state INIT if there are 
    // pending items in the log. 
    rpc CheckSync(HeartBeat) returns (HeartBeat) {}
    rpc Init(InitReq) returns (InitRes) {}
}

message InitReq {
  enum Role{
    LEADER = 0;

    FOLLOWER = 1;
  }
  Role role = 1;
}

message InitRes{
  enum Role{
    PRIMARY = 0;

    BACKUP = 1;
  }
  Role role = 1;
  string primary_ip = 2;
  int32 status = 3;
}

message HeartBeat {
    enum State {
        // can be used when doing the catch up work after failure
        INIT = 0;

        // when in normal operation
        READY = 1;
    }
    State state = 1;
}

message SyncReq {
    enum State {
        // can be used when doing the catch up work after failure
        INIT = 0;

        // when in normal operation
        READY = 1;
    }
    State state = 1;
    int32 last_address = 2;
}

message WriteRequest {
    int32 blk_address = 1;

    bytes buffer = 2;

    enum Crash {
      NO_CRASH = 0;

      PRIMARY_CRASH_BEFORE_LOCAL_WRITE_AFTER_REMOTE = 1;

      PRIMARY_CRASH_AFTER_LOCAL_WRITE_AFTER_REMOTE = 2;

      PRIMARY_CRASH_BEFORE_LOCAL_WRITE_BEFORE_REMOTE = 3;

      PRIMARY_CRASH_AFTER_LOCAL_WRITE_BEFORE_REMOTE = 4;

      BACKUP_CRASH_BEFORE_WRITE = 5;

      BACKUP_CRASH_AFTER_WRITE = 6;

      NODE_CRASH_READ = 7;
    }
    Crash crash_mode = 3;
}

message WriteResponse {
    enum Status {
        FAIL = 0;

        PASS = 1;
    }

    Status status = 1;
}